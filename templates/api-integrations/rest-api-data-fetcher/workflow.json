{
  "name": "REST API Data Fetcher",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "={{$env.API_BASE_URL}}/users",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3,
            "waitBetween": 2000
          }
        }
      },
      "id": "http-request",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "api-credentials",
          "name": "API Credentials"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.status}}",
              "operation": "equal",
              "value2": "success"
            }
          ]
        }
      },
      "id": "success-check",
      "name": "Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "functionCode": "// Transform the API response data\nconst items = $input.all();\n\nreturn items.map(item => {\n  const data = item.json.data || item.json;\n  \n  return {\n    json: {\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      created_at: new Date(data.created_at).toISOString(),\n      status: data.status || 'active',\n      transformed_at: new Date().toISOString()\n    }\n  };\n});"
      },
      "id": "transform-data",
      "name": "Transform Data",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 200]
    },
    {
      "parameters": {
        "functionCode": "// Handle API errors\nconst error = $json;\n\nreturn {\n  json: {\n    error: true,\n    message: error.message || 'API request failed',\n    status_code: error.httpCode || 500,\n    timestamp: new Date().toISOString(),\n    retry_count: $node['HTTP Request'].parameter.options?.retry?.maxTries || 0\n  }\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 400]
    },
    {
      "parameters": {
        "options": {
          "fileName": "api_data_{{new Date().toISOString().split('T')[0]}}.json"
        }
      },
      "id": "save-to-file",
      "name": "Save to File",
      "type": "n8n-nodes-base.writeFile",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "subject": "API Data Fetch Error",
        "text": "Error occurred while fetching data from API:\n\nError: {{$json.message}}\nStatus Code: {{$json.status_code}}\nTimestamp: {{$json.timestamp}}\n\nPlease check the workflow and API credentials."
      },
      "id": "error-notification",
      "name": "Error Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [1120, 400]
    }
  ],
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Check": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Save to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": ""
  },
  "versionId": "1",
  "id": "rest-api-data-fetcher",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "tags": ["api", "rest", "data-fetcher", "integration"]
}
